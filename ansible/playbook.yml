- name: Setup Flask App and Monitoring on EC2
  hosts: flask_server
  become: yes  # Run tasks as root user

  vars:
    docker_compose_version: "1.29.2"  # Define the Docker Compose version as a variable

  tasks:
    # Update system packages to the latest versions
    - name: Update system packages
      apt:
        update_cache: yes  # Update package cache to ensure we have the latest package lists

    # Install Docker package
    - name: Install Docker
      apt:
        name: docker.io  # Install Docker on the EC2 instance
        state: present  # Ensure Docker is installed

    # Ensure Docker service is started and enabled on boot
    - name: Start Docker service
      service:
        name: docker  # Target the Docker service
        state: started  # Make sure Docker is running
        enabled: yes  # Enable Docker to start on boot

    # Install Docker Compose by downloading the binary
    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"  # URL to download Docker Compose binary for the current OS
        dest: /usr/local/bin/docker-compose  # Destination to place the binary
        mode: 0755  # Make it executable by the owner and group

    # Stop and remove any existing Flask container if running (safe cleanup)
    - name: Stop and remove existing Flask container
      docker_container:
        failed_when: false  # Explicitly prevent task failure if container is not running
        state: absent  # Ensure the container is stopped and removed
        force_kill: yes  # Forcefully kill the container if necessary
        ignore_errors: yes  # Ignore errors if container is not running

    # Pull the latest version of your custom Flask app Docker image
    - name: Pull the latest Flask Docker image from Docker Hub
      docker_image:
        name: omkarsg07/flask-app  # The name of the Docker image
        tag: latest  # Pull the latest tag of the image
        source: pull  # Specify that the image should be pulled from Docker Hub

    # Run the Flask app container and expose port 5000
    - name: Run the Flask app container with latest image
      docker_container:
        name: flask-app-container  # Name of the container
        image: omkarsg07/flask-app:latest  # Docker image to run
        state: started  # Ensure the container is started
        restart_policy: always  # Always restart the container if it stops
        published_ports:
          - 5000:5000  # Expose port 5000 for accessing the Flask app
        detach: yes  # Run the container in detached mode (background)

    # Validate the existence of the user and create a directory for monitoring configuration files
    - name: Validate user existence
      command: id -u {{ monitoring_user }}
      register: user_check
      failed_when: user_check.rc != 0

    # Validate the existence of the docker-compose file for Prometheus + Grafana setup
    - name: Check if docker-compose.yml exists
      stat:
        path: "{{ playbook_dir }}/monitoring/docker-compose.yml"
      register: docker_compose_file

    # Copy the docker-compose file for Prometheus + Grafana setup
    - name: Copy docker-compose.yml for monitoring stack
      copy:
        src: "{{ playbook_dir }}/monitoring/docker-compose.yml"  # Use absolute path
        dest: /home/ubuntu/monitoring/docker-compose.yml  # Destination path on EC2
      when: docker_compose_file.stat.exists  # Only copy if the file exists
    # Copy the docker-compose file for Prometheus + Grafana setup
    - name: Copy docker-compose.yml for monitoring stack
      copy:
        src: "{{ lookup('file', playbook_dir + '/monitoring/docker-compose.yml') }}"  # Ensure the file exists and use an absolute path
        dest: /home/ubuntu/monitoring/docker-compose.yml  # Destination path on EC2

    # Copy Prometheus configuration file
    - name: Copy prometheus.yml config file
      copy:
        src: monitoring/prometheus.yml  # Local source file for Prometheus config
        dest: /home/ubuntu/monitoring/prometheus.yml  # Destination path on EC2

    # Verify Docker Compose is installed and functional
    - name: Verify Docker Compose installation
      command: /usr/local/bin/docker-compose --version
      register: docker_compose_check
      failed_when: docker_compose_check.rc != 0

    # Stop the monitoring stack if it's already running (clean restart)
    - name: Stop monitoring stack if running
      command: /usr/local/bin/docker-compose down  # Stop the running containers from the stack
      args:
        chdir: /home/ubuntu/monitoring  # Change directory to where the docker-compose.yml file is located
      ignore_errors: yes  # Ignore errors if nothing is running

    # Remove existing Grafana container to avoid name conflict
    - name: Remove existing Grafana container if exists
      docker_container:
        name: grafana  # Name of the Grafana container
        state: absent  # Ensure the container is stopped and removed
        force_kill: yes  # Forcefully kill the container if necessary
        ignore_errors: yes  # Ignore errors if container is not running

    # Start the full monitoring stack (Prometheus + Grafana + Node Exporter)
    - name: Start Prometheus (metrics collection), Grafana (visualization), and Node Exporter (system metrics) stack
      command: /usr/local/bin/docker-compose up -d  # Start the containers in detached mode
      args:
        chdir: /home/ubuntu/monitoring  # Change directory to where the docker-compose.yml file is located
